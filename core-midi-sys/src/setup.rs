/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

/*

use core_foundation_sys::*;
use super::MIDIServices::*;

pub type MIDISetupRef = MIDIObjectRef;
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub fn MIDISetupCreate(outSetup: *mut MIDISetupRef) -> OSStatus;
    pub fn MIDISetupDispose(setup: MIDISetupRef) -> OSStatus;
    pub fn MIDISetupInstall(setup: MIDISetupRef) -> OSStatus;
    pub fn MIDISetupGetCurrent(outSetup: *mut MIDISetupRef) -> OSStatus;
    pub fn MIDISetupToData(setup: MIDISetupRef, outData: *mut CFDataRef)
     -> OSStatus;
    pub fn MIDISetupFromData(data: CFDataRef, outSetup: *mut MIDISetupRef)
     -> OSStatus;
    pub fn MIDIDeviceAddEntity(device: MIDIDeviceRef, name: CFStringRef,
                               embedded: Boolean,
                               numSourceEndpoints: ItemCount,
                               numDestinationEndpoints: ItemCount,
                               newEntity: *mut MIDIEntityRef) -> OSStatus;
    pub fn MIDIDeviceRemoveEntity(device: MIDIDeviceRef,
                                  entity: MIDIEntityRef) -> OSStatus;
    pub fn MIDIEntityAddOrRemoveEndpoints(entity: MIDIEntityRef,
                                          numSourceEndpoints: ItemCount,
                                          numDestinationEndpoints: ItemCount)
     -> OSStatus;
    pub fn MIDISetupAddDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDISetupRemoveDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDISetupAddExternalDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDISetupRemoveExternalDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDIGetSerialPortOwner(portName: CFStringRef,
                                  outDriverName: *mut CFStringRef)
     -> OSStatus;
    pub fn MIDISetSerialPortOwner(portName: CFStringRef,
                                  driverName: CFStringRef) -> OSStatus;
    pub fn MIDIGetSerialPortDrivers(outDriverNames: *mut CFArrayRef)
     -> OSStatus;
    pub fn MIDIExternalDeviceCreate(name: CFStringRef,
                                    manufacturer: CFStringRef,
                                    model: CFStringRef,
                                    outDevice: *mut MIDIDeviceRef)
     -> OSStatus;
}
*/
