// automatically generated by rust-bindgen

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

/*
use core_foundation_sys::*;
use super::MIDIServices::*;

pub type MIDIThruConnectionRef = MIDIObjectRef;
#[repr(C)]
#[derive(Copy)]
pub struct MIDIValueMap {
    pub value: [UInt8; 128usize],
}
impl ::std::clone::Clone for MIDIValueMap {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for MIDIValueMap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDITransformType = UInt16;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed_ThruConnection1 {
    kMIDITransform_None = 0,
    kMIDITransform_FilterOut = 1,
    kMIDITransform_MapControl = 2,
    kMIDITransform_Add = 8,
    kMIDITransform_Scale = 9,
    kMIDITransform_MinValue = 10,
    kMIDITransform_MaxValue = 11,
    kMIDITransform_MapValue = 12,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed_ThruConnection2 { kMIDIThruConnection_MaxEndpoints = 8, }
pub type MIDITransformControlType = UInt8;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed_ThruConnection3 {
    kMIDIControlType_7Bit = 0,
    kMIDIControlType_14Bit = 1,
    kMIDIControlType_7BitRPN = 2,
    kMIDIControlType_14BitRPN = 3,
    kMIDIControlType_7BitNRPN = 4,
    kMIDIControlType_14BitNRPN = 5,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDITransform {
    pub transform: MIDITransformType,
    pub param: SInt16,
}
impl ::std::default::Default for MIDITransform {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIControlTransform {
    pub controlType: MIDITransformControlType,
    pub remappedControlType: MIDITransformControlType,
    pub controlNumber: UInt16,
    pub transform: MIDITransformType,
    pub param: SInt16,
}
impl ::std::default::Default for MIDIControlTransform {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIThruConnectionEndpoint {
    pub endpointRef: MIDIEndpointRef,
    pub uniqueID: MIDIUniqueID,
}
impl ::std::default::Default for MIDIThruConnectionEndpoint {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIThruConnectionParams {
    pub version: UInt32,
    pub numSources: UInt32,
    pub sources: [MIDIThruConnectionEndpoint; 8usize],
    pub numDestinations: UInt32,
    pub destinations: [MIDIThruConnectionEndpoint; 8usize],
    pub channelMap: [UInt8; 16usize],
    pub lowVelocity: UInt8,
    pub highVelocity: UInt8,
    pub lowNote: UInt8,
    pub highNote: UInt8,
    pub noteNumber: MIDITransform,
    pub velocity: MIDITransform,
    pub keyPressure: MIDITransform,
    pub channelPressure: MIDITransform,
    pub programChange: MIDITransform,
    pub pitchBend: MIDITransform,
    pub filterOutSysEx: UInt8,
    pub filterOutMTC: UInt8,
    pub filterOutBeatClock: UInt8,
    pub filterOutTuneRequest: UInt8,
    pub reserved2: [UInt8; 3usize],
    pub filterOutAllControls: UInt8,
    pub numControlTransforms: UInt16,
    pub numMaps: UInt16,
    pub reserved3: [UInt16; 4usize],
}
impl ::std::default::Default for MIDIThruConnectionParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub fn MIDIThruConnectionParamsInitialize(inConnectionParams:
                                                  *mut MIDIThruConnectionParams);
    pub fn MIDIThruConnectionCreate(inPersistentOwnerID: CFStringRef,
                                    inConnectionParams: CFDataRef,
                                    outConnection: *mut MIDIThruConnectionRef)
     -> OSStatus;
    pub fn MIDIThruConnectionDispose(connection: MIDIThruConnectionRef)
     -> OSStatus;
    pub fn MIDIThruConnectionGetParams(connection: MIDIThruConnectionRef,
                                       outConnectionParams: *mut CFDataRef)
     -> OSStatus;
    pub fn MIDIThruConnectionSetParams(connection: MIDIThruConnectionRef,
                                       inConnectionParams: CFDataRef)
     -> OSStatus;
    pub fn MIDIThruConnectionFind(inPersistentOwnerID: CFStringRef,
                                  outConnectionList: *mut CFDataRef)
     -> OSStatus;
}
*/
