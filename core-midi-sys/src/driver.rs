/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]


/*
use core_foundation_sys::*;
use super::MIDIServices::*;

pub type MIDIDriverRef = *mut *mut MIDIDriverInterface;
pub type MIDIDeviceListRef = MIDIObjectRef;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIDriverInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<unsafe extern "C" fn(thisPointer:
                                                                       *mut ::std::os::raw::c_void,
                                                                   iid:
                                                                       REFIID,
                                                                   ppv:
                                                                       *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(thisPointer:
                                                               *mut ::std::os::raw::c_void)
                                          -> ULONG>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(thisPointer:
                                                                *mut ::std::os::raw::c_void)
                                           -> ULONG>,
    pub FindDevices: ::std::option::Option<extern "C" fn(self_: MIDIDriverRef,
                                                         devList:
                                                             MIDIDeviceListRef)
                                               -> OSStatus>,
    pub Start: ::std::option::Option<extern "C" fn(self_: MIDIDriverRef,
                                                   devList: MIDIDeviceListRef)
                                         -> OSStatus>,
    pub Stop: ::std::option::Option<extern "C" fn(self_: MIDIDriverRef)
                                        -> OSStatus>,
    pub Configure: ::std::option::Option<extern "C" fn(self_: MIDIDriverRef,
                                                       device: MIDIDeviceRef)
                                             -> OSStatus>,
    pub Send: ::std::option::Option<unsafe extern "C" fn(self_: MIDIDriverRef,
                                                         pktlist:
                                                             *const MIDIPacketList,
                                                         destRefCon1:
                                                             *mut ::std::os::raw::c_void,
                                                         destRefCon2:
                                                             *mut ::std::os::raw::c_void)
                                        -> OSStatus>,
    pub EnableSource: ::std::option::Option<extern "C" fn(self_:
                                                              MIDIDriverRef,
                                                          src:
                                                              MIDIEndpointRef,
                                                          enabled: Boolean)
                                                -> OSStatus>,
    pub Flush: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              MIDIDriverRef,
                                                          dest:
                                                              MIDIEndpointRef,
                                                          destRefCon1:
                                                              *mut ::std::os::raw::c_void,
                                                          destRefCon2:
                                                              *mut ::std::os::raw::c_void)
                                         -> OSStatus>,
    pub Monitor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                MIDIDriverRef,
                                                            dest:
                                                                MIDIEndpointRef,
                                                            pktlist:
                                                                *const MIDIPacketList)
                                           -> OSStatus>,
}
impl ::std::default::Default for MIDIDriverInterface {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub static kMIDIDriverPropertyUsesSerial: CFStringRef;
}
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub fn MIDIDeviceCreate(owner: MIDIDriverRef, name: CFStringRef,
                            manufacturer: CFStringRef, model: CFStringRef,
                            outDevice: *mut MIDIDeviceRef) -> OSStatus;
    pub fn MIDIDeviceDispose(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDIDeviceListGetNumberOfDevices(devList: MIDIDeviceListRef)
     -> ItemCount;
    pub fn MIDIDeviceListGetDevice(devList: MIDIDeviceListRef,
                                   index0: ItemCount) -> MIDIDeviceRef;
    pub fn MIDIDeviceListAddDevice(devList: MIDIDeviceListRef,
                                   dev: MIDIDeviceRef) -> OSStatus;
    pub fn MIDIDeviceListDispose(devList: MIDIDeviceListRef) -> OSStatus;
    pub fn MIDIEndpointSetRefCons(endpt: MIDIEndpointRef,
                                  ref1: *mut ::std::os::raw::c_void,
                                  ref2: *mut ::std::os::raw::c_void)
     -> OSStatus;
    pub fn MIDIEndpointGetRefCons(endpt: MIDIEndpointRef,
                                  ref1: *mut *mut ::std::os::raw::c_void,
                                  ref2: *mut *mut ::std::os::raw::c_void)
     -> OSStatus;
    pub fn MIDIGetDriverIORunLoop() -> CFRunLoopRef;
    pub fn MIDIGetDriverDeviceList(driver: MIDIDriverRef)
     -> MIDIDeviceListRef;
    pub fn MIDIDriverEnableMonitoring(driver: MIDIDriverRef, enabled: Boolean)
     -> OSStatus;
}
*/
